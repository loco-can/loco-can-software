#include <Arduino.h>

#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>


#include "config.h"
#include "module_board.h"

#include "intelliLed.h"
#include "can_protocol.h"
#include "loco_config.h"

#include "webserver.h"


INTELLILED led(CAN_STATUS_LED);
WEBSERVER server(80);

void setup(void) {

	Serial.begin(115200);

	server.wifi((char*)AP_SSID, (char*)AP_PASSWORD);

	// // select WiFi connection type
	// if (WIFI_AP_MODE == true) {

	// 	WiFi.softAP((char*)AP_SSID, (char*)AP_PASSWORD);

	// 	IPAddress IP = WiFi.softAPIP();

	// 	Serial.print("AP IP address: ");
	// 	Serial.println(IP);
	// }

	// else {
	// 	WiFi.begin((char*)WIFI_SSID, (char*)WIFI_PASSWORD);
	// 	// WiFi.begin(ssid, password);

	// 	// wait for connection
	// 	while (WiFi.status() != WL_CONNECTED) {
	// 		delay(500);
	// 		Serial.println(".");
	// 	}

	// 	Serial.println();

	// 	Serial.print("Connected to ");
	// 	Serial.print(WIFI_SSID);
	// 	Serial.print(" - IP: ");
	// 	Serial.println(WiFi.localIP());
	// }

	// server.begin();
}


void loop(void) {

  // WiFiClient client = server.available();   // listen for incoming clients

  // if (client) {                             // if you get a client,
  //   Serial.println("New Client.");           // print a message out the serial port
  //   String currentLine = "";                // make a String to hold incoming data from the client
  //   while (client.connected()) {            // loop while the client's connected
  //     if (client.available()) {             // if there's bytes to read from the client,
  //       char c = client.read();             // read a byte, then
  //       Serial.write(c);                    // print it out the serial monitor
  //       if (c == '\n') {                    // if the byte is a newline character

  //         // if the current line is blank, you got two newline characters in a row.
  //         // that's the end of the client HTTP request, so send a response:
  //         if (currentLine.length() == 0) {
  //           // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
  //           // and a content-type so the client knows what's coming, then a blank line:
  //           client.println("HTTP/1.1 200 OK");
  //           client.println("Content-type:text/html");
  //           client.println();

  //           // the content of the HTTP response follows the header:
  //           client.print("Click <a href=\"/H\">here</a> to turn ON the LED.<br>");
  //           client.print("Click <a href=\"/L\">here</a> to turn OFF the LED.<br>");

  //           // The HTTP response ends with another blank line:
  //           client.println();
  //           // break out of the while loop:
  //           break;
  //         } else {    // if you got a newline, then clear currentLine:
  //           currentLine = "";
  //         }
  //       } else if (c != '\r') {  // if you got anything else but a carriage return character,
  //         currentLine += c;      // add it to the end of the currentLine
  //       }

  //       // Check to see if the client request was "GET /H" or "GET /L":
  //       if (currentLine.endsWith("GET /H")) {
  //         led.on();              // GET /H turns the LED on
  //       }
  //       if (currentLine.endsWith("GET /L")) {
  //         led.off();                // GET /L turns the LED off
  //       }
  //     }
  //   }
  //   // close the connection:
  //   client.stop();
  //   Serial.println("Client Disconnected.");
  // }
}